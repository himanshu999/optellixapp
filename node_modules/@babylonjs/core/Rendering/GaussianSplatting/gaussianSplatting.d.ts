import { Mesh } from "../../Meshes/mesh";
import type { Scene } from "../../scene";
import type { Nullable } from "../../types";
/**
 * @experimental
 * Helper class that loads, creates and manipulates a Gaussian Splatting
 */
export declare class GaussianSplatting {
    private _vertexCount;
    private _positions;
    private _uBuffer;
    private _covA;
    private _covB;
    private _sceneDisposeObserver;
    private _sceneBeforeRenderObserver;
    private _material;
    private _modelViewMatrix;
    private _minimum;
    private _maximum;
    /**
     * Name of the GS that is also used to name a mesh for rendering it
     */
    readonly name: string;
    /**
     * The scene the Gaussian Splatting mesh belongs to
     */
    readonly scene: Scene;
    /**
     * The mesh responsible for rendering the GS
     */
    mesh: Nullable<Mesh>;
    /**
     * Return the number of splattings used
     */
    get vertexCount(): number;
    /**
     * Shader material with alpha blending
     * @param scene parent scene
     */
    private _createMaterial;
    /**
     *
     * @param scene parent scene
     * @returns A simple 2 triangles quad
     */
    private _getMesh;
    protected _worker: Nullable<Worker>;
    protected static _VertexShaderSource: string;
    protected static _FragmentShaderSource: string;
    protected static _CreateWorker: (self: Worker) => void;
    protected _setData(binaryData: Uint8Array): void;
    /**
     * Construct a Gaussian Splatting proxy object
     * @param name name of the mesh used for rendering
     * @param scene scene it belongs to
     */
    constructor(name: string, scene: Scene);
    private _loadData;
    /**
     * Loads a .splat Gaussian Splatting array buffer asynchronously
     * @param data arraybuffer containing splat file
     * @returns a promise that resolves when the operation is complete
     */
    loadDataAsync(data: ArrayBuffer): Promise<void>;
    /**
     * Loads a .splat Gaussian Splatting file asynchronously
     * @param url path to the splat file to load
     * @returns a promise that resolves when the operation is complete
     */
    loadFileAsync(url: string): Promise<void>;
    /**
     * Clear datas used for Gaussian Splatting and associated resources
     */
    dispose(): void;
}
