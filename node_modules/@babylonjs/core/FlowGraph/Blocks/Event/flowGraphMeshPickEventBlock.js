import { AbstractMesh } from "../../../Meshes/abstractMesh.js";
import { FlowGraphEventBlock } from "../../flowGraphEventBlock.js";
import { PointerEventTypes } from "../../../Events/pointerEvents.js";
import { RegisterClass } from "../../../Misc/typeStore.js";
import { Tools } from "../../../Misc/tools.js";
import { _isADescendantOf } from "../../utils.js";
/**
 * @experimental
 * A block that activates when a mesh is picked.
 */
export class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {
    constructor(config) {
        if (config.path.hasTemplateStrings) {
            Tools.Warn("Template strings are not supported in the path of mesh pick event blocks.");
        }
        super(config);
        this.config = config;
    }
    _getReferencedMesh(context) {
        return this.config.path.getProperty(context);
    }
    /**
     * @internal
     */
    _preparePendingTasks(context) {
        let pickObserver = context._getExecutionVariable(this, "meshPickObserver");
        if (!pickObserver) {
            const mesh = this.config.path.getProperty(context);
            if (!mesh || !(mesh instanceof AbstractMesh)) {
                throw new Error("Mesh pick event block requires a valid mesh");
            }
            context._setExecutionVariable(this, "mesh", mesh);
            pickObserver = mesh.getScene().onPointerObservable.add((pointerInfo) => {
                var _a, _b, _c;
                if (pointerInfo.type === PointerEventTypes.POINTERPICK &&
                    ((_a = pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) &&
                    (((_b = pointerInfo.pickInfo) === null || _b === void 0 ? void 0 : _b.pickedMesh) === mesh || _isADescendantOf((_c = pointerInfo.pickInfo) === null || _c === void 0 ? void 0 : _c.pickedMesh, mesh))) {
                    this._execute(context);
                }
            });
            const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);
            context._setExecutionVariable(this, "meshPickObserver", pickObserver);
            context._setExecutionVariable(this, "meshDisposeObserver", disposeObserver);
        }
    }
    _onDispose(context) {
        this._cancelPendingTasks(context);
        context._removePendingBlock(this);
    }
    /**
     * @internal
     */
    _cancelPendingTasks(context) {
        const mesh = context._getExecutionVariable(this, "mesh");
        const pickObserver = context._getExecutionVariable(this, "meshPickObserver");
        const disposeObserver = context._getExecutionVariable(this, "meshDisposeObserver");
        mesh.getScene().onPointerObservable.remove(pickObserver);
        mesh.onDisposeObservable.remove(disposeObserver);
        context._deleteExecutionVariable(this, "mesh");
        context._deleteExecutionVariable(this, "meshPickObserver");
        context._deleteExecutionVariable(this, "meshDisposeObserver");
    }
    getClassName() {
        return FlowGraphMeshPickEventBlock.ClassName;
    }
    serialize(serializationObject) {
        super.serialize(serializationObject);
        serializationObject.config.path = this.config.path.serialize();
    }
}
FlowGraphMeshPickEventBlock.ClassName = "FGMeshPickEventBlock";
RegisterClass(FlowGraphMeshPickEventBlock.ClassName, FlowGraphMeshPickEventBlock);
//# sourceMappingURL=flowGraphMeshPickEventBlock.js.map