{"version":3,"file":"flowGraphMeshPickEventBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphMeshPickEventBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport { PointerEventTypes } from \"../../../Events/pointerEvents\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { FlowGraphPath } from \"../../flowGraphPath\";\r\nimport { Tools } from \"../../../Misc/tools\";\r\nimport { _isADescendantOf } from \"../../utils\";\r\n/**\r\n * @experimental\r\n */\r\nexport interface IFlowGraphMeshPickEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    path: FlowGraphPath;\r\n}\r\n/**\r\n * @experimental\r\n * A block that activates when a mesh is picked.\r\n */\r\nexport class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {\r\n    public constructor(public config: IFlowGraphMeshPickEventBlockConfiguration) {\r\n        if (config.path.hasTemplateStrings) {\r\n            Tools.Warn(\"Template strings are not supported in the path of mesh pick event blocks.\");\r\n        }\r\n        super(config);\r\n    }\r\n\r\n    public _getReferencedMesh(context: FlowGraphContext): AbstractMesh | undefined {\r\n        return this.config.path.getProperty(context);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        let pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        if (!pickObserver) {\r\n            const mesh = this.config.path.getProperty(context);\r\n            if (!mesh || !(mesh instanceof AbstractMesh)) {\r\n                throw new Error(\"Mesh pick event block requires a valid mesh\");\r\n            }\r\n            context._setExecutionVariable(this, \"mesh\", mesh);\r\n            pickObserver = mesh.getScene().onPointerObservable.add((pointerInfo) => {\r\n                if (\r\n                    pointerInfo.type === PointerEventTypes.POINTERPICK &&\r\n                    pointerInfo.pickInfo?.pickedMesh &&\r\n                    (pointerInfo.pickInfo?.pickedMesh === mesh || _isADescendantOf(pointerInfo.pickInfo?.pickedMesh, mesh))\r\n                ) {\r\n                    this._execute(context);\r\n                }\r\n            });\r\n            const disposeObserver = mesh.onDisposeObservable.add(() => this._onDispose);\r\n            context._setExecutionVariable(this, \"meshPickObserver\", pickObserver);\r\n            context._setExecutionVariable(this, \"meshDisposeObserver\", disposeObserver);\r\n        }\r\n    }\r\n\r\n    public _onDispose(context: FlowGraphContext) {\r\n        this._cancelPendingTasks(context);\r\n        context._removePendingBlock(this);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const mesh = context._getExecutionVariable(this, \"mesh\");\r\n        const pickObserver = context._getExecutionVariable(this, \"meshPickObserver\");\r\n        const disposeObserver = context._getExecutionVariable(this, \"meshDisposeObserver\");\r\n\r\n        mesh.getScene().onPointerObservable.remove(pickObserver);\r\n        mesh.onDisposeObservable.remove(disposeObserver);\r\n\r\n        context._deleteExecutionVariable(this, \"mesh\");\r\n        context._deleteExecutionVariable(this, \"meshPickObserver\");\r\n        context._deleteExecutionVariable(this, \"meshDisposeObserver\");\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return FlowGraphMeshPickEventBlock.ClassName;\r\n    }\r\n\r\n    public serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.path = this.config.path.serialize();\r\n    }\r\n\r\n    static ClassName = \"FGMeshPickEventBlock\";\r\n}\r\nRegisterClass(FlowGraphMeshPickEventBlock.ClassName, FlowGraphMeshPickEventBlock);\r\n"]}