import { Color3, Color4 } from "../Maths/math.color.js";
import { Quaternion, Vector2, Vector3, Vector4 } from "../Maths/math.vector.js";
import { FlowGraphPath } from "./flowGraphPath.js";
function isMeshClassName(className) {
    return (className === "Mesh" ||
        className === "AbstractMesh" ||
        className === "GroundMesh" ||
        className === "InstanceMesh" ||
        className === "LinesMesh" ||
        className === "GoldbergMesh" ||
        className === "GreasedLineMesh" ||
        className === "TrailMesh");
}
function isVectorClassName(className) {
    return className === "Vector2" || className === "Vector3" || className === "Vector4" || className === "Quaternion" || className === "Color3" || className === "Color4";
}
function parseVector(className, value) {
    if (className === "Vector2") {
        return Vector2.FromArray(value);
    }
    else if (className === "Vector3") {
        return Vector3.FromArray(value);
    }
    else if (className === "Vector4") {
        return Vector4.FromArray(value);
    }
    else if (className === "Quaternion") {
        return Quaternion.FromArray(value);
    }
    else if (className === "Color3") {
        return new Color3(value[0], value[1], value[2]);
    }
    else if (className === "Color4") {
        return new Color4(value[0], value[1], value[2], value[3]);
    }
    else {
        throw new Error(`Unknown vector class name ${className}`);
    }
}
/**
 * The default function that serializes values in a context object to a serialization object
 * @param key the key where the value should be stored in the serialization object
 * @param value the value to store
 * @param serializationObject the object where the value will be stored
 */
export function defaultValueSerializationFunction(key, value, serializationObject) {
    var _a, _b;
    const className = (_b = (_a = value === null || value === void 0 ? void 0 : value.getClassName) === null || _a === void 0 ? void 0 : _a.call(value)) !== null && _b !== void 0 ? _b : "";
    if (isMeshClassName(className)) {
        serializationObject[key] = {
            name: value.name,
            className,
        };
    }
    else if (isVectorClassName(className)) {
        serializationObject[key] = {
            value: value.asArray(),
            className,
        };
    }
    else {
        serializationObject[key] = value;
    }
}
/**
 * The default function that parses values stored in a serialization object
 * @param key the key to the value that will be parsed
 * @param serializationObject the object that will be parsed
 * @param scene
 * @returns
 */
export function defaultValueParseFunction(key, serializationObject, scene) {
    const intermediateValue = serializationObject[key];
    let finalValue;
    const className = intermediateValue === null || intermediateValue === void 0 ? void 0 : intermediateValue.className;
    if (isMeshClassName(className)) {
        finalValue = scene.getMeshByName(intermediateValue.name);
    }
    else if (isVectorClassName(className)) {
        finalValue = parseVector(className, intermediateValue.value);
    }
    else if (className === FlowGraphPath.ClassName) {
        finalValue = FlowGraphPath.Parse(intermediateValue);
    }
    else if (intermediateValue && intermediateValue.value !== undefined) {
        finalValue = intermediateValue.value;
    }
    else {
        finalValue = intermediateValue;
    }
    return finalValue;
}
//# sourceMappingURL=serialization.js.map