import type { IFlowGraphBlockConfiguration } from "./flowGraphBlock";
import { FlowGraphBlock } from "./flowGraphBlock";
import type { FlowGraphContext } from "./flowGraphContext";
import { FlowGraphSignalConnection } from "./flowGraphSignalConnection";
/**
 * @experimental
 * A block that executes some action. Always has an input signal (which is not used by event blocks).
 * Can have one or more output signals.
 */
export declare abstract class FlowGraphExecutionBlock extends FlowGraphBlock {
    /**
     * Input connection: The input signal of the block.
     */
    readonly in: FlowGraphSignalConnection;
    signalInputs: FlowGraphSignalConnection[];
    signalOutputs: FlowGraphSignalConnection[];
    protected constructor(config?: IFlowGraphBlockConfiguration);
    configure(): void;
    /**
     * @internal
     * Executes the flow graph execution block.
     */
    abstract _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void;
    protected _registerSignalInput(name: string): FlowGraphSignalConnection;
    protected _registerSignalOutput(name: string): FlowGraphSignalConnection;
    getSignalInput(name: string): FlowGraphSignalConnection | undefined;
    getSignalOutput(name: string): FlowGraphSignalConnection | undefined;
    serialize(serializationObject?: any): void;
    deserialize(serializationObject: any): void;
    getClassName(): string;
}
