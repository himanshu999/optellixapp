import { RandomGUID } from "../Misc/guid.js";
import { FlowGraphConnectionType } from "./flowGraphConnection.js";
import { FlowGraphDataConnection } from "./flowGraphDataConnection.js";
import { Tools } from "../Misc/tools.js";
import { defaultValueParseFunction, defaultValueSerializationFunction } from "./serialization.js";
/**
 * @experimental
 * A block in a flow graph. The most basic form
 * of a block has inputs and outputs that contain
 * data.
 */
export class FlowGraphBlock {
    /** Constructor is protected so only subclasses can be instantiated */
    constructor(config) {
        this.config = config;
        /**
         * A randomly generated GUID for each block.
         */
        this.uniqueId = RandomGUID();
        this.configure();
    }
    configure() {
        var _a, _b;
        // overriden in child classes, uses config
        this.name = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : this.getClassName();
        this.dataInputs = [];
        this.dataOutputs = [];
    }
    /**
     * @internal
     */
    _updateOutputs(_context) {
        // empty by default, overriden in data blocks
    }
    registerDataInput(name, className) {
        const input = new FlowGraphDataConnection(name, FlowGraphConnectionType.Input, this, className);
        this.dataInputs.push(input);
        return input;
    }
    registerDataOutput(name, className) {
        const output = new FlowGraphDataConnection(name, FlowGraphConnectionType.Output, this, className);
        this.dataOutputs.push(output);
        return output;
    }
    getDataInput(name) {
        return this.dataInputs.find((i) => i.name === name);
    }
    getDataOutput(name) {
        return this.dataOutputs.find((i) => i.name === name);
    }
    serialize(serializationObject = {}, _valueSerializeFunction = defaultValueSerializationFunction) {
        serializationObject.uniqueId = this.uniqueId;
        serializationObject.config = {};
        if (this.config) {
            serializationObject.config["name"] = this.config.name;
        }
        serializationObject.dataInputs = [];
        serializationObject.dataOutputs = [];
        serializationObject.className = this.getClassName();
        for (const input of this.dataInputs) {
            const serializedInput = {};
            input.serialize(serializedInput);
            serializationObject.dataInputs.push(serializedInput);
        }
        for (const output of this.dataOutputs) {
            const serializedOutput = {};
            output.serialize(serializedOutput);
            serializationObject.dataOutputs.push(serializedOutput);
        }
    }
    getClassName() {
        return "FGBlock";
    }
    static Parse(serializationObject, scene, valueParseFunction = defaultValueParseFunction) {
        const classType = Tools.Instantiate(serializationObject.className);
        const parsedConfig = {};
        if (serializationObject.config) {
            for (const key in serializationObject.config) {
                parsedConfig[key] = valueParseFunction(key, serializationObject.config, scene);
            }
        }
        const obj = new classType(parsedConfig);
        obj.uniqueId = serializationObject.uniqueId;
        for (let i = 0; i < serializationObject.dataInputs.length; i++) {
            const dataInput = obj.getDataInput(serializationObject.dataInputs[i].name);
            if (dataInput) {
                dataInput.deserialize(serializationObject.dataInputs[i]);
            }
            else {
                throw new Error("Could not find data input with name " + serializationObject.dataInputs[i].name + " in block " + serializationObject.className);
            }
        }
        for (let i = 0; i < serializationObject.dataOutputs.length; i++) {
            const dataOutput = obj.getDataOutput(serializationObject.dataOutputs[i].name);
            if (dataOutput) {
                dataOutput.deserialize(serializationObject.dataOutputs[i]);
            }
            else {
                throw new Error("Could not find data output with name " + serializationObject.dataOutputs[i].name + " in block " + serializationObject.className);
            }
        }
        obj.metadata = serializationObject.metadata;
        obj.deserialize && obj.deserialize(serializationObject);
        return obj;
    }
}
//# sourceMappingURL=flowGraphBlock.js.map