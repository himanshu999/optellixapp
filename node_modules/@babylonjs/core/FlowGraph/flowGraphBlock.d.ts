import type { FlowGraphContext } from "./flowGraphContext";
import { FlowGraphDataConnection } from "./flowGraphDataConnection";
import type { RichType } from "./flowGraphRichTypes";
import type { ISerializedFlowGraphBlock } from "./typeDefinitions";
import type { Scene } from "../scene";
export interface IFlowGraphBlockConfiguration {
    name?: string;
    [extraPropertyKey: string]: any;
}
/**
 * @experimental
 * A block in a flow graph. The most basic form
 * of a block has inputs and outputs that contain
 * data.
 */
export declare class FlowGraphBlock {
    config?: IFlowGraphBlockConfiguration | undefined;
    /**
     * A randomly generated GUID for each block.
     */
    uniqueId: string;
    /**
     * The name of the block.
     */
    name: string;
    /**
     * The data inputs of the block.
     */
    dataInputs: FlowGraphDataConnection<any>[];
    /**
     * The data outputs of the block.
     */
    dataOutputs: FlowGraphDataConnection<any>[];
    metadata: any;
    /** Constructor is protected so only subclasses can be instantiated */
    protected constructor(config?: IFlowGraphBlockConfiguration | undefined);
    configure(): void;
    /**
     * @internal
     */
    _updateOutputs(_context: FlowGraphContext): void;
    registerDataInput<T>(name: string, className: RichType<T>): FlowGraphDataConnection<T>;
    registerDataOutput<T>(name: string, className: RichType<T>): FlowGraphDataConnection<T>;
    getDataInput(name: string): FlowGraphDataConnection<any> | undefined;
    getDataOutput(name: string): FlowGraphDataConnection<any> | undefined;
    serialize(serializationObject?: any, _valueSerializeFunction?: (key: string, value: any, serializationObject: any) => any): void;
    getClassName(): string;
    static Parse(serializationObject: ISerializedFlowGraphBlock, scene: Scene, valueParseFunction?: (key: string, serializationObject: any, scene: Scene) => any): FlowGraphBlock;
}
