{"version":3,"file":"interactivityPathCameraExtensions.js","sourceRoot":"","sources":["../../../../../../dev/loaders/src/glTF/2.0/Extensions/interactivityPathCameraExtensions.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Camera } from \"core/Cameras/camera\";\r\nimport type { FlowGraphPath } from \"core/FlowGraph/flowGraphPath\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { IGLTF } from \"../glTFLoaderInterfaces\";\r\n\r\nconst camerasRegex = /^\\/cameras\\/(\\d+)\\/(orthographic|perspective)\\/(xmag|ymag|zfar|znear|aspectRatio|yfov)$/;\r\n\r\nfunction getBabylonCamera(path: FlowGraphPath, context: FlowGraphContext): { babylonCamera: Camera; gltfProperty: string } {\r\n    const fullPath = path.getFinalPath();\r\n    const gltfTree = context.getVariable(\"gltf\") as IGLTF;\r\n    if (!gltfTree) {\r\n        throw new Error(`No glTF tree found for path ${fullPath}`);\r\n    }\r\n    const matches = fullPath.match(camerasRegex);\r\n    if (!matches || matches.length !== 4) {\r\n        throw new Error(`Invalid path ${fullPath}`);\r\n    }\r\n    const cameraIndex = parseInt(matches[1]);\r\n    const camera = gltfTree.cameras && gltfTree.cameras[cameraIndex];\r\n    if (!camera) {\r\n        throw new Error(`Invalid camera index for path ${fullPath}`);\r\n    }\r\n    const babylonCamera = camera._babylonCamera;\r\n    if (!babylonCamera) {\r\n        throw new Error(`No Babylon camera found for path ${fullPath}`);\r\n    }\r\n    const gltfProperty = matches[3];\r\n    if (!gltfProperty) {\r\n        throw new Error(`Invalid property for path ${fullPath}`);\r\n    }\r\n\r\n    return { babylonCamera, gltfProperty };\r\n}\r\n\r\nexport const camerasExtension = {\r\n    shouldProcess(path: FlowGraphPath): boolean {\r\n        const fullPath = path.getFinalPath();\r\n        return !!fullPath.match(camerasRegex);\r\n    },\r\n    processGet(path: FlowGraphPath, context: FlowGraphContext): any {\r\n        const { babylonCamera, gltfProperty } = getBabylonCamera(path, context);\r\n        switch (gltfProperty) {\r\n            case \"aspectRatio\":\r\n                Tools.Warn(\"Getting aspect ratio is not supported.\");\r\n                return -1;\r\n            case \"zNear\":\r\n                return babylonCamera.minZ;\r\n            case \"zFar\":\r\n                return babylonCamera.maxZ;\r\n            case \"yfov\":\r\n                return babylonCamera.fov;\r\n            case \"xmag\":\r\n                return babylonCamera.orthoRight;\r\n            case \"ymag\":\r\n                return babylonCamera.orthoTop;\r\n        }\r\n    },\r\n    processSet(path: FlowGraphPath, context: FlowGraphContext, value: any) {\r\n        const { babylonCamera, gltfProperty } = getBabylonCamera(path, context);\r\n        switch (gltfProperty) {\r\n            case \"aspectRatio\":\r\n                Tools.Warn(\"Setting aspect ratio is not supported.\");\r\n                break;\r\n            case \"zNear\":\r\n                babylonCamera.minZ = value;\r\n                break;\r\n            case \"zFar\":\r\n                babylonCamera.maxZ = value;\r\n                break;\r\n            case \"yfov\":\r\n                babylonCamera.fov = value;\r\n                break;\r\n            case \"xmag\":\r\n                babylonCamera.orthoLeft = -value;\r\n                babylonCamera.orthoRight = value;\r\n                break;\r\n            case \"ymag\":\r\n                babylonCamera.orthoTop = value;\r\n                babylonCamera.orthoBottom = -value;\r\n                break;\r\n        }\r\n    },\r\n};\r\n"]}